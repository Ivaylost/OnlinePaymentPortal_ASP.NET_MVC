// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlinePaymentPortal.Data;

namespace OnlinePaymentPortal.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190612122732_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Nickname");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("CurrencyId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BannerLink");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ImagePath");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbr");

                    b.Property<bool>("IsPrefixed");

                    b.Property<string>("Name");

                    b.Property<string>("Sign");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BaseCurrencyId");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<Guid>("ToCurrencyId");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Description");

                    b.Property<Guid>("RecieverAccountId");

                    b.Property<Guid>("SenderAccountId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("RecieverAccountId");

                    b.HasIndex("SenderAccountId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.UsersAccounts", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("AccountId");

                    b.HasKey("UserId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("UsersAccounts");
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Account", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Admin", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Balance", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Account", "Account")
                        .WithMany("Balances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlinePaymentPortal.Data.Models.Currency", "Currency")
                        .WithMany("Balance")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Rate", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Currency", "BaseCurrency")
                        .WithMany("BaseRates")
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlinePaymentPortal.Data.Models.Currency", "ToCurrency")
                        .WithMany("ToRates")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.Transaction", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Account", "RecieverAccount")
                        .WithMany("RecieverTransaction")
                        .HasForeignKey("RecieverAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlinePaymentPortal.Data.Models.Account", "SenderAccount")
                        .WithMany("SenderTransactions")
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlinePaymentPortal.Data.Models.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.User", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlinePaymentPortal.Data.Models.UsersAccounts", b =>
                {
                    b.HasOne("OnlinePaymentPortal.Data.Models.Account", "Account")
                        .WithMany("UsersAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlinePaymentPortal.Data.Models.User", "User")
                        .WithMany("UsersAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
